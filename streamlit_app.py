# test.py
import streamlit as st
import pandas as pd
import json
import os
import streamlit.components.v1 as components
# ======== C·∫§U H√åNH FILE L∆ØU NH√ìM ======== #
GROUPS_FILE = "groups.json"

# ===== H√†m l∆∞u v√† t·∫£i nh√≥m ===== #
def save_groups(group_a, group_b, group_c):
    data = {"A": group_a, "B": group_b, "C": group_c}
    with open(GROUPS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def load_groups():
    if os.path.exists(GROUPS_FILE):
        with open(GROUPS_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    else:
        return {"A": [], "B": [], "C": []}

# ===== H√†m ch√≠nh chia data theo d√¢y chuy·ªÅn b√°nh xe ===== #
def chia_data_day_chuyen(danh_sach_nhan_su, groups, total_data, last_person=None):
    # S·∫Øp x·∫øp l·∫°i danh s√°ch nh√¢n s·ª± theo ƒë√∫ng th·ª© t·ª± nh√≥m A ‚Üí B ‚Üí C
    group_a = [name for name in groups.get("A", []) if name in danh_sach_nhan_su]
    group_b = [name for name in groups.get("B", []) if name in danh_sach_nhan_su]
    group_c = [name for name in groups.get("C", []) if name in danh_sach_nhan_su]


    def make_sole_queue(names, count):
        if not names:
            return []
        queue = []
        i = 0
        while len(queue) < count * len(names):
            queue.append(names[i % len(names)])
            i += 1
        return queue

    base_unit = len(group_a) * 3 + len(group_b) * 2 + len(group_c) * 1
    if base_unit == 0:
        raise ValueError("‚ö†Ô∏è Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c nh√≥m cho b·∫•t k·ª≥ ai trong danh s√°ch!")

    rounds = (total_data + base_unit - 1) // base_unit

    queue = []
    for _ in range(rounds):
        queue += make_sole_queue(group_a, 3)
        queue += make_sole_queue(group_b, 2)
        queue += make_sole_queue(group_c, 1)

    if last_person and last_person in queue:
        idx = len(queue) - 1 - queue[::-1].index(last_person)
        queue = queue[idx+1:] + queue[:idx+1]

    return queue[:total_data]

# ===== Giao di·ªán Streamlit ===== #
st.set_page_config(page_title="B√°nh Xe DATA", layout="wide")
st.title("üîÑ Chia DATA theo d√¢y chuy·ªÅn nh√≥m A-B-C")

tabs = st.tabs(["üì• Thi·∫øt l·∫≠p nh√≥m", "üöÄ Ch·∫°y chia DATA"])

# ===== TAB 1: Thi·∫øt l·∫≠p nh√≥m ===== #
with tabs[0]:
    st.subheader("üìå Thi·∫øt l·∫≠p nh√≥m c·ªë ƒë·ªãnh")
    group_a_raw = st.text_area("üëë Nh√≥m A (3 data/ng∆∞·ªùi)", placeholder="Nh·∫≠p t√™n c√°ch nhau b·ªüi d·∫•u xu·ªëng d√≤ng ho·∫∑c d·∫•u ph·∫©y")
    group_b_raw = st.text_area("üßë‚Äçüíº Nh√≥m B (2 data/ng∆∞·ªùi)")
    group_c_raw = st.text_area("üë§ Nh√≥m C (1 data/ng∆∞·ªùi)")

    def parse_names(raw):
        return [x.strip() for x in raw.replace(",", "\n").splitlines() if x.strip()]

    if st.button("üíæ L∆∞u nh√≥m"):
        save_groups(parse_names(group_a_raw), parse_names(group_b_raw), parse_names(group_c_raw))
        st.success("‚úÖ ƒê√£ l∆∞u nh√≥m th√†nh c√¥ng!")

    if os.path.exists(GROUPS_FILE):
        st.info("üìÇ Nh√≥m hi·ªán t·∫°i:")
        groups = load_groups()
        col1, col2, col3 = st.columns(3)
        with col1:
            st.markdown("### üëë Nh√≥m A")
            st.write(groups.get("A", []))
        with col2:
            st.markdown("### üßë‚Äçüíº Nh√≥m B")
            st.write(groups.get("B", []))
        with col3:
            st.markdown("### üë§ Nh√≥m C")
            st.write(groups.get("C", []))

# ===== TAB 2: Ch·∫°y chia ===== #
with tabs[1]:
    st.sidebar.header("‚öôÔ∏è C·∫•u h√¨nh chia")
    total_data = st.sidebar.number_input("üì¶ T·ªïng s·ªë DATA c·∫ßn chia", min_value=1, step=1)
    last_person = st.sidebar.text_input("üîÅ T√™n ng∆∞·ªùi cu·ªëi c√πng ƒë√£ nh·∫≠n (ƒë·ªÉ ti·∫øp t·ª•c)", placeholder="V√≠ d·ª•: Nh√¢n")

    st.subheader("üì• Danh s√°ch nh√¢n s·ª± c·∫ßn chia (l·ªôn x·ªôn)")
    raw_names = st.text_area("‚úçÔ∏è D√°n danh s√°ch nh√¢n s·ª± (t·ª± ƒë·ªông d√≤ nh√≥m t·ª´ danh s√°ch ƒë√£ l∆∞u)")
    danh_sach_nhan_su = parse_names(raw_names)

    if st.button("üöÄ B·∫Øt ƒë·∫ßu chia"):
        try:
            groups = load_groups()
            result = chia_data_day_chuyen(danh_sach_nhan_su, groups, total_data, last_person)

            # üöÄ Th√™m x·ª≠ l√Ω M√£ Team
            team_map = {
                "1": "1H∆∞ng",
                "2": "2Ki·ªát",
                "3": "3Ruby",
                "4": "4S∆°n"
            }

            team_labels = []
            for name in result:
                if name and name[0] in team_map and name[1:].isalpha():
                    team_labels.append(team_map[name[0]])
                else:
                    team_labels.append("")

            df = pd.DataFrame({
                "M√£ Team": team_labels,
                "Nh√¢n s·ª± nh·∫≠n DATA": result
            })
            # üìà Th·ªëng k√™ t·ªïng s·ªë DATA m·ªói ng∆∞·ªùi nh·∫≠n
            thong_ke = pd.Series(result).value_counts().reset_index()
            thong_ke.columns = ["Nh√¢n s·ª±", "S·ªë DATA nh·∫≠n"]

            st.subheader("üìà Th·ªëng k√™ s·ªë DATA m·ªói nh√¢n s·ª±")
            st.dataframe(thong_ke, use_container_width=True)

            # Cho ph√©p t·∫£i file th·ªëng k√™
            st.download_button("üì• T·∫£i file th·ªëng k√™", thong_ke.to_csv(index=False).encode(), "thong_ke_data.csv")

            st.subheader("üìä K·∫øt qu·∫£ ph√¢n chia")
            st.dataframe(df, use_container_width=True)

            # ‚úÖ COPY CLIPBOARD
            tsv_str = df.to_csv(sep="\t", index=False, header=False)
            escaped_tsv_str = tsv_str.replace("&", "&amp;").replace("<", "&lt;").replace(">", "&gt;")

            html_code = f"""
                <textarea id="dataArea" rows="10" style="width:100%;font-size:14px;">{escaped_tsv_str}</textarea>
                <button id="copyBtn" onclick="copyToClipboard()"
                    style="margin-top:10px;padding:6px 16px;font-weight:bold;background-color:#4CAF50;color:white;border:none;border-radius:4px;cursor:pointer">
                    üìã Copy v√†o Clipboard
                </button>
                <p id="copyMsg" style="font-size: 0.9rem; color: grey; margin-top:5px;"></p>
                <script>
                function copyToClipboard() {{
                    const text = document.getElementById("dataArea").value;
                    navigator.clipboard.writeText(text).then(function() {{
                        var btn = document.getElementById("copyBtn");
                        btn.innerHTML = "‚úÖ ƒê√£ copy!";
                        btn.style.backgroundColor = "#2E7D32";
                        document.getElementById("copyMsg").innerText = "‚û°Ô∏è D√°n v√†o Excel ho·∫∑c Google Sheets";
                        setTimeout(function() {{
                            btn.innerHTML = "üìã Copy v√†o Clipboard";
                            btn.style.backgroundColor = "#4CAF50";
                            document.getElementById("copyMsg").innerText = "";
                        }}, 2000);
                    }});
                }}
                </script>
            """
            components.html(html_code, height=300)

            # ‚úÖ T·∫£i file
            st.download_button("üì• T·∫£i file Excel", df.to_csv(index=False).encode(), "day_chuyen_data.csv")

            st.success(f"‚úÖ Chia xong, ng∆∞·ªùi cu·ªëi c√πng l√†: **{result[-1]}** ‚Äî d√πng ƒë·ªÉ ti·∫øp v√≤ng sau.")

        except ValueError as e:
            st.error(str(e))
